// Prisma + Postgres
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Presentation {
  id                         Int      @id
  slug                       String   @unique
  name                       String
  grade                      String
  subject                    String
  topic                      String?
  sub_topic                  String?
  thumbnail_alt_text         String?
  thumbnail                  String?
  presentation_content       String?
  presentation_view_link     String
  rating                     Float?
  reviews                    Int?
  download_ppt_url           String?
  download_pdf_url           String?
  slides_export_link_url     String?
  meta_description           String?
  meta_titles                String?
  summary                    String?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  @@index([subject])
  @@index([grade])
  @@index([topic])
  @@index([sub_topic])
}

/* ---------- NextAuth models + reset tokens ---------- */

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  resetTokens PasswordResetToken[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
